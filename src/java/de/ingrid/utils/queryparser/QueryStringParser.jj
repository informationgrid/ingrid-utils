/**
 * Ingrid Query String Parser
 */

options {
LOOKAHEAD=1;
STATIC=false;
}

PARSER_BEGIN(QueryStringParser)
package de.ingrid.utils.queryparser;

import java.io.StringReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import de.ingrid.utils.query.ClauseQuery;
import de.ingrid.utils.query.FieldQuery;
import de.ingrid.utils.query.IngridQuery;
import de.ingrid.utils.query.TermQuery;
import de.ingrid.utils.query.RangeQuery;
import de.ingrid.utils.query.WildCardFieldQuery;
import de.ingrid.utils.query.WildCardTermQuery;
import de.ingrid.utils.query.FuzzyTermQuery;
import de.ingrid.utils.query.FuzzyFieldQuery;

public class QueryStringParser {

	private static Pattern fMatchQuotes = Pattern.compile("\"(.*)\"");

     /**
     * Parses the string to a query object representation
     * @param queryString
     * @return ingrid query that contains subqueries
     * @throws ParseException
     */
    public static IngridQuery parse(String queryString) throws ParseException {
    	QueryStringParser parser = new QueryStringParser(new StringReader(queryString));
    	return parser.parse();
    }
}

PARSER_END(QueryStringParser)

<*> TOKEN : {
  <#_NUM_CHAR:   ["0"-"9"] >

| <#_ESCAPED_CHAR: "\\" [ "\\", "+", "-", "!", "(", ")", ":", "^",
                          "[", "]", "\"", "{", "}", "~", "*", "?" ] >
| <#_TERM_START_CHAR: ( ~[ " ", "\t", "\n", "\r", "+", "-", "!", "(", ")", ":", "^",
                           "[", "]", "\"", "{", "}", "~", "*", "?" ]
                       | <_ESCAPED_CHAR> ) >
| <#_TERM_CHAR: ( <_TERM_START_CHAR> | <_ESCAPED_CHAR> | "-" | "+" ) >
| <#_WHITESPACE: ( " " | "\t" | "\n" | "\r") >
}

<DEFAULT, RangeIn, RangeEx> SKIP : {
 <<_WHITESPACE>>
}


<DEFAULT> TOKEN : {
  <AND:       ("AND" | "&&" | "+") >
| <OR:        ("OR" | "||") >
| <NOT:       ("NOT" | "!" | "-") >
| <LPAREN:    "(" >
| <RPAREN:    ")" >
| <COLON:     ":" >
| <CARAT:     "^" > : Boost
| <QUOTED:     "\"" (~["\""])+ "\"">
| <FLOAT:     ("-")?(<_NUM_CHAR>)+"."(<_NUM_CHAR>)+>
| <TERM:      <_TERM_START_CHAR> (<_TERM_CHAR>)*  >
| <FIELD:      <_TERM_START_CHAR> (<_TERM_CHAR>)* <COLON> >
| <FUZZY_SLOP:     "~" ( (<_NUM_CHAR>)+ ( "." (<_NUM_CHAR>)+ )? )? >
| <PREFIXTERM:  <_TERM_START_CHAR> (<_TERM_CHAR>)* "*" >
| <WILDTERM:  <_TERM_START_CHAR>
              (<_TERM_CHAR> | ( [ "*", "?" ] ))* >
| <RANGEIN_START: "[" > : RangeIn
| <RANGEEX_START: "{" > : RangeEx
}

<Boost> TOKEN : {
<NUMBER:    (<_NUM_CHAR>)+ ( "." (<_NUM_CHAR>)+ )? > : DEFAULT
}

<RangeIn> TOKEN : {
<RANGEIN_TO: "TO">
| <RANGEIN_END: "]"> : DEFAULT
| <RANGEIN_QUOTED: "\"" (~["\""])+ "\"">
| <RANGEIN_GOOP: (~[ " ", "]" ])+ >
}

<RangeEx> TOKEN : {
<RANGEEX_TO: "TO">
| <RANGEEX_END: "}"> : DEFAULT
| <RANGEEX_QUOTED: "\"" (~["\""])+ "\"">
| <RANGEEX_GOOP: (~[ " ", "}" ])+ >
}

IngridQuery parse() :
	{ 
		// variables
		Token token;
		IngridQuery query = new IngridQuery();
	}
	{	
	 
		
		(
			LOOKAHEAD(2) term(query, true, false)
			| LOOKAHEAD(3) wildCard(query, true , false) // we need to process wildcarde before field
			| LOOKAHEAD(3) field(query, true , false)
			| LOOKAHEAD(5) range(query, true , false)
			| LOOKAHEAD(30) clause(query)
			| LOOKAHEAD(30) singleClause(query)
			
		)*
	
		{return  query;}
	}

	
// term	
	void term(IngridQuery q, boolean required, boolean prohibited ) :
	{
		Token t;
		Token fuzzySlop=null;
		boolean fuzzy = false;
		boolean wildcard = false;
		String term = null;
	}
	{
		(<AND> {required =true; q.setLastWasAnd(true); q.setLastQueryRequired();} | <OR>{required = false; q.setLastQueryUnrequired(); q.setLastWasAnd(false);} | <NOT> {prohibited =true; })?
		(t=<WILDTERM>{ wildcard=true; }|t=<TERM>|t=<PREFIXTERM>|t=<QUOTED>)
		[ fuzzySlop=<FUZZY_SLOP> { fuzzy=true; } ]
		{
            t.image = t.image.replace('/', ' ');
			final Matcher matcher = fMatchQuotes.matcher(t.image);
			if (matcher.matches()) {
				term = matcher.group(1);
			} else {
				term = t.image;
			}

			if(fuzzy){
			  q.addFuzzyTermQuery(new FuzzyTermQuery(required,prohibited, term));
			}else if(wildcard){
     		  q.addWildCardTermQuery(new WildCardTermQuery(required,prohibited, term));
			}else{
			  q.addTerm(new TermQuery(required,prohibited, term));
			}
		}
	}
	

	
// field
	void field(IngridQuery q, boolean required, boolean prohibited ) :
	{
		Token key;
		Token value;
		Token fuzzySlop=null;
		boolean fuzzy = false;
		String term = null;
	}
	{
		( <AND> {required =true; } | <OR>{required = false; q.setLastQueryUnrequired();} | <NOT> {prohibited =true; })?
		key=<FIELD>
		(value=<FLOAT>|value=<TERM>|value=<PREFIXTERM>|value=<QUOTED>)
		[ fuzzySlop=<FUZZY_SLOP> { fuzzy=true; } ]
		{
			final Matcher matcher = fMatchQuotes.matcher(value.image);
			if (matcher.matches()) {
				term = matcher.group(1);
			} else {
				term = value.image;
			}
			
			if(fuzzy){
				q.addFuzzyFieldQuery(new FuzzyFieldQuery( required, prohibited,  key.image.substring(0, key.image.length() -1).toLowerCase(), term));
			}else{
				q.addField(new FieldQuery( required, prohibited,  key.image.substring(0, key.image.length() -1).toLowerCase(), term));
			}
		}
	}
	

// range queries

	void range(IngridQuery q, boolean required, boolean prohibited) :
	{
		Token key;
		Token goop1;
		Token goop2;
		boolean in;
	}
	
	{
		(<AND> {required =true; } | <OR>{required = false; q.setLastQueryUnrequired(); } | <NOT> {prohibited =true; })?
		key=<FIELD>
		<RANGEIN_START> ( goop1=<RANGEIN_GOOP>|goop1=<RANGEIN_QUOTED> )
	    [ <RANGEIN_TO> ] ( goop2=<RANGEIN_GOOP>|goop2=<RANGEIN_QUOTED> )
	    <RANGEIN_END> 
		{q.addRangeQuery(new RangeQuery(required,prohibited, key.image.substring(0, key.image.length() -1).toLowerCase(), goop1.image, goop2.image, true ));}
	}
	
	
// wildcard queries
	void wildCard(IngridQuery q, boolean required, boolean prohibited) :
	{
		Token key;
		Token value;
	}
	{
		(<AND> {required =true; } | <OR>{required = false; q.setLastQueryUnrequired(); }  | <NOT> {prohibited =true; })?
		key=<FIELD>
		(value=<WILDTERM>|value=<PREFIXTERM>)
		{q.addWildCardFieldQuery(new WildCardFieldQuery( required, prohibited,  key.image.substring(0, key.image.length() -1).toLowerCase(), value.image));}
	}
	

// clause...
	void singleClause(IngridQuery q) :
	{
		Token t;
		boolean required = true;	
		boolean prohibited = false;
	}
	{
		( <AND> {required =true; } | <OR>{required = false; q.setLastQueryUnrequired(); } | <NOT> {prohibited =true; })?
		{}
		<LPAREN>
		 (
		 		LOOKAHEAD(3) term(q, required, prohibited)
				| LOOKAHEAD(5) wildCard(q, required , prohibited)
				| LOOKAHEAD(3) field(q, required , prohibited)
				| LOOKAHEAD(5) range(q, required , prohibited)
				| LOOKAHEAD(30) singleClause(q)
				| LOOKAHEAD(30) clause(q)
				
		)
		<RPAREN> 
	}
		

// clause...
	void clause(IngridQuery q) :
	{   
		ClauseQuery query;
		Token t;
		boolean required = true;	
		boolean prohibited = false;
	}
	{
		(<AND> {required =true; q.setLastWasAnd(true); q.setLastQueryRequired();} | <OR>{required = false; q.setLastQueryUnrequired(); q.setLastWasAnd(false);} | <NOT> {prohibited =true; })?
		{query =  new ClauseQuery( required, prohibited );}
		<LPAREN>
		 (
		 		LOOKAHEAD(3) term(query, true , false) 
				| LOOKAHEAD(3) wildCard(query, true , false)
				| LOOKAHEAD(3) field(query, true , false)
				| LOOKAHEAD(5) range(query, true , false)
				| LOOKAHEAD(30) singleClause(query)
				| LOOKAHEAD(30) clause(query)
		)
		(
		 		LOOKAHEAD(3) term(query, true, false) 
				| LOOKAHEAD(3) wildCard(query, true , false)
				| LOOKAHEAD(3) field(query, true , false)
				| LOOKAHEAD(5) range(query, true , false)
				| LOOKAHEAD(30) singleClause(query)
				| LOOKAHEAD(30) clause(query)
		)+
		 
		<RPAREN> 
		{q.addClause(query);}
	}	
	
